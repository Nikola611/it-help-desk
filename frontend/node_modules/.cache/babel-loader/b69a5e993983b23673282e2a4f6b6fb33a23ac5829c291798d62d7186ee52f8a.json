{"ast":null,"code":"var _jsxFileName = \"C:\\\\TicketScheduler\\\\it-help-desk\\\\frontend\\\\src\\\\components\\\\ITHelperDashboard.js\",\n  _s = $RefreshSig$();\n// src/components/ITHelperDashboard.js\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITHelperDashboard = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    fetchAssignedTickets();\n  }, []);\n  const fetchAssignedTickets = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/auth/tickets/assigned', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setTickets(data);\n      } else {\n        setMessage(data.error);\n      }\n    } catch (error) {\n      setMessage('An error occurred while fetching tickets.');\n    }\n  };\n  const updateTicketTime = async (ticketId, newDuration) => {\n    try {\n      const response = await fetch(`http://localhost:5000/auth/tickets/update-time/${ticketId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          duration: newDuration\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage('Time updated successfully!');\n        fetchAssignedTickets(); // Refresh tickets after updating\n      } else {\n        setMessage(data.error);\n      }\n    } catch (error) {\n      setMessage('An error occurred while updating the ticket time.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"it-helper-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Assigned Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ticket-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: ticket.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: ticket.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Duration: \", ticket.duration, \" minutes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"New duration\",\n        onChange: e => updateTicketTime(ticket.id, parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, ticket.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"status-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ITHelperDashboard, \"T7hZdUoWhKWrCFDqaM1bt2O2zEs=\");\n_c = ITHelperDashboard;\nexport default ITHelperDashboard;\nvar _c;\n$RefreshReg$(_c, \"ITHelperDashboard\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ITHelperDashboard","_s","tickets","setTickets","message","setMessage","fetchAssignedTickets","response","fetch","method","headers","localStorage","getItem","data","json","ok","error","updateTicketTime","ticketId","newDuration","body","JSON","stringify","duration","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","ticket","title","description","type","placeholder","onChange","e","id","parseInt","target","value","_c","$RefreshReg$"],"sources":["C:/TicketScheduler/it-help-desk/frontend/src/components/ITHelperDashboard.js"],"sourcesContent":["// src/components/ITHelperDashboard.js\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst ITHelperDashboard = () => {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchAssignedTickets();\r\n  }, []);\r\n\r\n  const fetchAssignedTickets = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/auth/tickets/assigned', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setTickets(data);\r\n      } else {\r\n        setMessage(data.error);\r\n      }\r\n    } catch (error) {\r\n      setMessage('An error occurred while fetching tickets.');\r\n    }\r\n  };\r\n\r\n  const updateTicketTime = async (ticketId, newDuration) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/auth/tickets/update-time/${ticketId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n        body: JSON.stringify({ duration: newDuration }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMessage('Time updated successfully!');\r\n        fetchAssignedTickets(); // Refresh tickets after updating\r\n      } else {\r\n        setMessage(data.error);\r\n      }\r\n    } catch (error) {\r\n      setMessage('An error occurred while updating the ticket time.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"it-helper-dashboard\">\r\n      <h1>Assigned Tickets</h1>\r\n      {tickets.map((ticket) => (\r\n        <div key={ticket.id} className=\"ticket-card\">\r\n          <h3>{ticket.title}</h3>\r\n          <p>{ticket.description}</p>\r\n          <p>Current Duration: {ticket.duration} minutes</p>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"New duration\"\r\n            onChange={(e) => updateTicketTime(ticket.id, parseInt(e.target.value))}\r\n          />\r\n        </div>\r\n      ))}\r\n      {message && <p className=\"status-message\">{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ITHelperDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}